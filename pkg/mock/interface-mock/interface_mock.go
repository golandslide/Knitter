// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/HyperNetworks/Knitter/knitter-manager/models (interfaces: PortServiceAPI)

/*
Copyright 2018 ZTE Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package interface_mock

import (
	models "github.com/HyperNetworks/Knitter/knitter-manager/models"
	mgr_agt "github.com/HyperNetworks/Knitter/pkg/inter-cmpt/mgr-agt"
	gomock "github.com/golang/mock/gomock"
)

// Mock of PortServiceAPI interface
type MockPortServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockPortServiceAPIRecorder
}

// Recorder for MockPortServiceAPI (not exported)
type _MockPortServiceAPIRecorder struct {
	mock *MockPortServiceAPI
}

func NewMockPortServiceAPI(ctrl *gomock.Controller) *MockPortServiceAPI {
	mock := &MockPortServiceAPI{ctrl: ctrl}
	mock.recorder = &_MockPortServiceAPIRecorder{mock}
	return mock
}

func (_m *MockPortServiceAPI) EXPECT() *_MockPortServiceAPIRecorder {
	return _m.recorder
}

func (_m *MockPortServiceAPI) AttachPortToVM(_param0 models.TranID, _param1 *models.PortVMOpsReq) error {
	ret := _m.ctrl.Call(_m, "AttachPortToVM", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPortServiceAPIRecorder) AttachPortToVM(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachPortToVM", arg0, arg1)
}

func (_m *MockPortServiceAPI) CreatePort(_param0 models.TranID, _param1 *models.CreatePortReq) (*mgr_agt.CreatePortResp, error) {
	ret := _m.ctrl.Call(_m, "CreatePort", _param0, _param1)
	ret0, _ := ret[0].(*mgr_agt.CreatePortResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPortServiceAPIRecorder) CreatePort(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePort", arg0, arg1)
}

func (_m *MockPortServiceAPI) DeletePort(_param0 models.TranID, _param1 string) error {
	ret := _m.ctrl.Call(_m, "DeletePort", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPortServiceAPIRecorder) DeletePort(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePort", arg0, arg1)
}

func (_m *MockPortServiceAPI) DetachPortFromVM(_param0 models.TranID, _param1 *models.PortVMOpsReq) error {
	ret := _m.ctrl.Call(_m, "DetachPortFromVM", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPortServiceAPIRecorder) DetachPortFromVM(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachPortFromVM", arg0, arg1)
}
