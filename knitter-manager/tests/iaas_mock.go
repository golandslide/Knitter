// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/HyperNetworks/Knitter/pkg/iaas-accessor (interfaces: IaaS)

/*
Copyright 2018 ZTE Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package test

import (
	iaas_accessor "github.com/HyperNetworks/Knitter/pkg/iaas-accessor"
	mgr_iaas "github.com/HyperNetworks/Knitter/pkg/inter-cmpt/mgr-iaas"
	gomock "github.com/golang/mock/gomock"
	subnets "github.com/rackspace/gophercloud/openstack/networking/v2/subnets"
)

// Mock of IaaS interface
type MockIaaS struct {
	ctrl     *gomock.Controller
	recorder *_MockIaaSRecorder
}

// Recorder for MockIaaS (not exported)
type _MockIaaSRecorder struct {
	mock *MockIaaS
}

func NewMockIaaS(ctrl *gomock.Controller) *MockIaaS {
	mock := &MockIaaS{ctrl: ctrl}
	mock.recorder = &_MockIaaSRecorder{mock}
	return mock
}

func (_m *MockIaaS) EXPECT() *_MockIaaSRecorder {
	return _m.recorder
}

func (_m *MockIaaS) AttachNetToRouter(_param0 string, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "AttachNetToRouter", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) AttachNetToRouter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachNetToRouter", arg0, arg1)
}

func (_m *MockIaaS) AttachPortToVM(_param0 string, _param1 string) (*iaas_accessor.Interface, error) {
	ret := _m.ctrl.Call(_m, "AttachPortToVM", _param0, _param1)
	ret0, _ := ret[0].(*iaas_accessor.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) AttachPortToVM(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachPortToVM", arg0, arg1)
}

func (_m *MockIaaS) Auth() error {
	ret := _m.ctrl.Call(_m, "Auth")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIaaSRecorder) Auth() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Auth")
}

func (_m *MockIaaS) CreateBulkPorts(_param0 *mgr_iaas.MgrBulkPortsReq) ([]*iaas_accessor.Interface, error) {
	ret := _m.ctrl.Call(_m, "CreateBulkPorts", _param0)
	ret0, _ := ret[0].([]*iaas_accessor.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) CreateBulkPorts(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateBulkPorts", arg0)
}

func (_m *MockIaaS) CreateNetwork(_param0 string) (*iaas_accessor.Network, error) {
	ret := _m.ctrl.Call(_m, "CreateNetwork", _param0)
	ret0, _ := ret[0].(*iaas_accessor.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) CreateNetwork(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateNetwork", arg0)
}

func (_m *MockIaaS) CreatePort(_param0 string, _param1 string, _param2 string, _param3 string, _param4 string, _param5 string) (*iaas_accessor.Interface, error) {
	ret := _m.ctrl.Call(_m, "CreatePort", _param0, _param1, _param2, _param3, _param4, _param5)
	ret0, _ := ret[0].(*iaas_accessor.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) CreatePort(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePort", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockIaaS) CreateProviderNetwork(_param0 string, _param1 string, _param2 string, _param3 string, _param4 bool) (*iaas_accessor.Network, error) {
	ret := _m.ctrl.Call(_m, "CreateProviderNetwork", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(*iaas_accessor.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) CreateProviderNetwork(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateProviderNetwork", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockIaaS) CreateRouter(_param0 string, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateRouter", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) CreateRouter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRouter", arg0, arg1)
}

func (_m *MockIaaS) CreateSubnet(_param0 string, _param1 string, _param2 string, _param3 []subnets.AllocationPool) (*iaas_accessor.Subnet, error) {
	ret := _m.ctrl.Call(_m, "CreateSubnet", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*iaas_accessor.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) CreateSubnet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSubnet", arg0, arg1, arg2, arg3)
}

func (_m *MockIaaS) DeleteNetwork(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteNetwork", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIaaSRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteNetwork", arg0)
}

func (_m *MockIaaS) DeletePort(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeletePort", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIaaSRecorder) DeletePort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePort", arg0)
}

func (_m *MockIaaS) DeleteRouter(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteRouter", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIaaSRecorder) DeleteRouter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRouter", arg0)
}

func (_m *MockIaaS) DeleteSubnet(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteSubnet", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIaaSRecorder) DeleteSubnet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSubnet", arg0)
}

func (_m *MockIaaS) DetachNetFromRouter(_param0 string, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "DetachNetFromRouter", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) DetachNetFromRouter(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachNetFromRouter", arg0, arg1)
}

func (_m *MockIaaS) DetachPortFromVM(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "DetachPortFromVM", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIaaSRecorder) DetachPortFromVM(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachPortFromVM", arg0, arg1)
}

func (_m *MockIaaS) GetAttachReq() int {
	ret := _m.ctrl.Call(_m, "GetAttachReq")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockIaaSRecorder) GetAttachReq() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAttachReq")
}

func (_m *MockIaaS) GetNetwork(_param0 string) (*iaas_accessor.Network, error) {
	ret := _m.ctrl.Call(_m, "GetNetwork", _param0)
	ret0, _ := ret[0].(*iaas_accessor.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetNetwork(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNetwork", arg0)
}

func (_m *MockIaaS) GetNetworkExtenAttrs(_param0 string) (*iaas_accessor.NetworkExtenAttrs, error) {
	ret := _m.ctrl.Call(_m, "GetNetworkExtenAttrs", _param0)
	ret0, _ := ret[0].(*iaas_accessor.NetworkExtenAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetNetworkExtenAttrs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNetworkExtenAttrs", arg0)
}

func (_m *MockIaaS) GetNetworkID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetNetworkID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetNetworkID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNetworkID", arg0)
}

func (_m *MockIaaS) GetPort(_param0 string) (*iaas_accessor.Interface, error) {
	ret := _m.ctrl.Call(_m, "GetPort", _param0)
	ret0, _ := ret[0].(*iaas_accessor.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetPort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPort", arg0)
}

func (_m *MockIaaS) GetRouter(_param0 string) (*iaas_accessor.Router, error) {
	ret := _m.ctrl.Call(_m, "GetRouter", _param0)
	ret0, _ := ret[0].(*iaas_accessor.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetRouter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRouter", arg0)
}

func (_m *MockIaaS) GetSubnet(_param0 string) (*iaas_accessor.Subnet, error) {
	ret := _m.ctrl.Call(_m, "GetSubnet", _param0)
	ret0, _ := ret[0].(*iaas_accessor.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetSubnet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubnet", arg0)
}

func (_m *MockIaaS) GetSubnetID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetSubnetID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetSubnetID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubnetID", arg0)
}

func (_m *MockIaaS) GetTenantUUID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetTenantUUID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) GetTenantUUID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTenantUUID", arg0)
}

func (_m *MockIaaS) GetType() string {
	ret := _m.ctrl.Call(_m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockIaaSRecorder) GetType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetType")
}

func (_m *MockIaaS) ListPorts(_param0 string) ([]*iaas_accessor.Interface, error) {
	ret := _m.ctrl.Call(_m, "ListPorts", _param0)
	ret0, _ := ret[0].([]*iaas_accessor.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIaaSRecorder) ListPorts(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPorts", arg0)
}

func (_m *MockIaaS) SetAttachReq(_param0 int) {
	_m.ctrl.Call(_m, "SetAttachReq", _param0)
}

func (_mr *_MockIaaSRecorder) SetAttachReq(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetAttachReq", arg0)
}

func (_m *MockIaaS) UpdateRouter(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "UpdateRouter", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIaaSRecorder) UpdateRouter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateRouter", arg0, arg1, arg2)
}
