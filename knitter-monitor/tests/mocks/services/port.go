// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/HyperNetworks/Knitter/knitter-monitor/services (interfaces: PortServiceInterface)

package mockservices

import (
	services "github.com/HyperNetworks/Knitter/knitter-monitor/services"
	jason "github.com/antonholmquist/jason"
	gomock "github.com/golang/mock/gomock"
)

// Mock of PortServiceInterface interface
type MockPortServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockPortServiceInterfaceRecorder
}

// Recorder for MockPortServiceInterface (not exported)
type _MockPortServiceInterfaceRecorder struct {
	mock *MockPortServiceInterface
}

func NewMockPortServiceInterface(ctrl *gomock.Controller) *MockPortServiceInterface {
	mock := &MockPortServiceInterface{ctrl: ctrl}
	mock.recorder = &_MockPortServiceInterfaceRecorder{mock}
	return mock
}

func (_m *MockPortServiceInterface) EXPECT() *_MockPortServiceInterfaceRecorder {
	return _m.recorder
}

func (_m *MockPortServiceInterface) DeleteBulkPorts(_param0 string, _param1 []string) error {
	ret := _m.ctrl.Call(_m, "DeleteBulkPorts", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPortServiceInterfaceRecorder) DeleteBulkPorts(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBulkPorts", arg0, arg1)
}

func (_m *MockPortServiceInterface) NewPortsWithEagerAttrAndLazyAttr(_param0 *services.PodForCreatPort, _param1 *jason.Object) ([]*services.Port, error) {
	ret := _m.ctrl.Call(_m, "NewPortsWithEagerAttrAndLazyAttr", _param0, _param1)
	ret0, _ := ret[0].([]*services.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPortServiceInterfaceRecorder) NewPortsWithEagerAttrAndLazyAttr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewPortsWithEagerAttrAndLazyAttr", arg0, arg1)
}

func (_m *MockPortServiceInterface) NewPortsWithEagerAttrFromK8s(_param0 *services.PodForCreatPort, _param1 *jason.Object) ([]*services.Port, error) {
	ret := _m.ctrl.Call(_m, "NewPortsWithEagerAttrFromK8s", _param0, _param1)
	ret0, _ := ret[0].([]*services.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPortServiceInterfaceRecorder) NewPortsWithEagerAttrFromK8s(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewPortsWithEagerAttrFromK8s", arg0, arg1)
}
