// Automatically generated by MockGen. DO NOT EDIT!
// Source: k8s.io/client-go/tools/cache (interfaces: Indexer)

package mockcache

import (
	gomock "github.com/golang/mock/gomock"
	cache "k8s.io/client-go/tools/cache"
)

// Mock of Indexer interface
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *_MockIndexerRecorder
}

// Recorder for MockIndexer (not exported)
type _MockIndexerRecorder struct {
	mock *MockIndexer
}

func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &_MockIndexerRecorder{mock}
	return mock
}

func (_m *MockIndexer) EXPECT() *_MockIndexerRecorder {
	return _m.recorder
}

func (_m *MockIndexer) Add(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Add", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexerRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0)
}

func (_m *MockIndexer) AddIndexers(_param0 cache.Indexers) error {
	ret := _m.ctrl.Call(_m, "AddIndexers", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexerRecorder) AddIndexers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddIndexers", arg0)
}

func (_m *MockIndexer) ByIndex(_param0 string, _param1 string) ([]interface{}, error) {
	ret := _m.ctrl.Call(_m, "ByIndex", _param0, _param1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIndexerRecorder) ByIndex(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ByIndex", arg0, arg1)
}

func (_m *MockIndexer) Delete(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexerRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockIndexer) Get(_param0 interface{}) (interface{}, bool, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockIndexerRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockIndexer) GetByKey(_param0 string) (interface{}, bool, error) {
	ret := _m.ctrl.Call(_m, "GetByKey", _param0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockIndexerRecorder) GetByKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByKey", arg0)
}

func (_m *MockIndexer) GetIndexers() cache.Indexers {
	ret := _m.ctrl.Call(_m, "GetIndexers")
	ret0, _ := ret[0].(cache.Indexers)
	return ret0
}

func (_mr *_MockIndexerRecorder) GetIndexers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIndexers")
}

func (_m *MockIndexer) Index(_param0 string, _param1 interface{}) ([]interface{}, error) {
	ret := _m.ctrl.Call(_m, "Index", _param0, _param1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIndexerRecorder) Index(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0, arg1)
}

func (_m *MockIndexer) IndexKeys(_param0 string, _param1 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "IndexKeys", _param0, _param1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIndexerRecorder) IndexKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IndexKeys", arg0, arg1)
}

func (_m *MockIndexer) List() []interface{} {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

func (_mr *_MockIndexerRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockIndexer) ListIndexFuncValues(_param0 string) []string {
	ret := _m.ctrl.Call(_m, "ListIndexFuncValues", _param0)
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockIndexerRecorder) ListIndexFuncValues(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListIndexFuncValues", arg0)
}

func (_m *MockIndexer) ListKeys() []string {
	ret := _m.ctrl.Call(_m, "ListKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockIndexerRecorder) ListKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListKeys")
}

func (_m *MockIndexer) Replace(_param0 []interface{}, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Replace", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexerRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Replace", arg0, arg1)
}

func (_m *MockIndexer) Resync() error {
	ret := _m.ctrl.Call(_m, "Resync")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexerRecorder) Resync() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resync")
}

func (_m *MockIndexer) Update(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIndexerRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}
